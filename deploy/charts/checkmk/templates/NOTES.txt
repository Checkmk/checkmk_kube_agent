You can access the checkmk `cluster-collector` via:
{{- if .Values.clusterCollector.ingress.enabled }}
Ingress:
{{- range $host := .Values.clusterCollector.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.tlsCommunication.enabled }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.clusterCollector.service.type }}
NodePort:
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "checkmk.fullname" . }}-cluster-collector);
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}");
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.clusterCollector.service.type }}
LoadBalancer:
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "checkmk.fullname" . }}-cluster-collector'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "checkmk.fullname" . }}-cluster-collector --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}");
  echo http://$SERVICE_IP:{{ .Values.clusterCollector.service.port }}
{{- else if contains "ClusterIP" .Values.clusterCollector.service.type }}
ClusterIP:
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "checkmk.name" . }},app.kubernetes.io/instance={{ .Release.Name }},component={{ include "checkmk.fullname" . }}-cluster-collector" -o jsonpath="{.items[0].metadata.name}");
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}");
  echo "Use http://127.0.0.1:8080 for access.";
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}
  # Cluster-internal DNS of `cluster-collector`: {{ include "checkmk.fullname" . }}-cluster-collector.{{ .Release.Namespace }}
With the token of the service account named `{{ template "checkmk.serviceAccountName.checkmk" . }}` in the namespace `{{ .Release.Namespace }}` you can now issue queries against the `cluster-collector`.
{{- if semverCompare ">= 1.24-0" (include "checkmk.kubeVersion" .) }}
Run the following to create a token:
  export TOKEN=$(kubectl create token -n {{ .Release.Namespace }} {{ template "checkmk.serviceAccountName.checkmk" . }});
{{- else }}
Run the following to fetch its token, resp. ca-certificate:
  export TOKEN=$(kubectl get secret $(kubectl get serviceaccount {{ template "checkmk.serviceAccountName.checkmk" . }} -o=jsonpath='{.secrets[*].name}' -n {{ .Release.Namespace }}) -n {{ .Release.Namespace }} -o=jsonpath='{.data.token}' | base64 --decode);
  export CA_CRT="$(kubectl get secret $(kubectl get serviceaccount {{ template "checkmk.serviceAccountName.checkmk" . }} -o=jsonpath='{.secrets[*].name}' -n {{ .Release.Namespace }}) -n {{ .Release.Namespace }} -o=jsonpath='{.data.ca\.crt}' | base64 --decode)";
  # Note: Quote the variable when echo'ing to preserve proper line breaks: `echo "$CA_CRT"`
{{- end }}
To test access you can run:
{{- if .Values.clusterCollector.ingress.enabled }}
{{- if $.Values.tlsCommunication.enabled }}
  curl -k -H "Authorization: Bearer $TOKEN" https://{{ (first .Values.clusterCollector.ingress.hosts).host }}{{ (first ((first .Values.clusterCollector.ingress.hosts).paths)).path }}/metadata | jq
{{- else }}
  curl -H "Authorization: Bearer $TOKEN" {{ (first .Values.clusterCollector.ingress.hosts).host }}{{ (first ((first .Values.clusterCollector.ingress.hosts).paths)).path }}/metadata | jq
{{- end }}
{{- if $.Values.networkPolicy.enabled }}
  NOTE: You have NetworkPolicies enabled, so you need to make sure traffic from your ingress-controller is allowed.
{{- end }}
{{- else if contains "NodePort" .Values.clusterCollector.service.type }}
{{- if $.Values.tlsCommunication.enabled }}
  curl -k -H "Authorization: Bearer $TOKEN" https://$NODE_IP:$NODE_PORT/metadata | jq
{{- else }}
  curl -H "Authorization: Bearer $TOKEN" http://$NODE_IP:$NODE_PORT/metadata | jq
{{- end }}
{{- if $.Values.networkPolicy.enabled }}
  NOTE: You have NetworkPolicies enabled, so you need to make sure traffic from your origin is allowed.
{{- end }}
{{- else if contains "LoadBalancer" .Values.clusterCollector.service.type }}
{{- if $.Values.tlsCommunication.enabled }}
  curl -k -H "Authorization: Bearer $TOKEN" https://$SERVICE_IP:{{ .Values.clusterCollector.service.port }}/metadata | jq
{{- else }}
  curl -H "Authorization: Bearer $TOKEN" http://$SERVICE_IP:{{ .Values.clusterCollector.service.port }}/metadata | jq
{{- end }}
{{- if $.Values.networkPolicy.enabled }}
  NOTE: You have NetworkPolicies enabled, so you need to make sure traffic from your origin is allowed.
{{- end }}
{{- else if contains "ClusterIP" .Values.clusterCollector.service.type }}
{{- if $.Values.tlsCommunication.enabled }}
  kubectl -n {{ .Release.Namespace }} run -it test-access --rm --image wbitt/network-multitool --restart=Never -- env TOKEN=$TOKEN sh -c 'sleep 2 && curl -k -H "Authorization: Bearer $TOKEN" https://{{ include "checkmk.fullname" . }}-cluster-collector.{{ .Release.Namespace }}.svc:8080/metadata | jq'
{{- else }}
  kubectl -n {{ .Release.Namespace }} run -it test-access --rm --image wbitt/network-multitool --restart=Never -- env TOKEN=$TOKEN sh -c 'sleep 2 && curl -H "Authorization: Bearer $TOKEN" {{ include "checkmk.fullname" . }}-cluster-collector.{{ .Release.Namespace }}.svc:8080/metadata | jq'
{{- end }}
{{- if $.Values.networkPolicy.enabled }}
  NOTE: You have NetworkPolicies enabled, so you need to label the `test-access` pod with `component: {{ include "checkmk.fullname" . }}-node-collector`.
{{- end }}
{{- end }}
